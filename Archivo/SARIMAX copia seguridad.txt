import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
import warnings
warnings.filterwarnings("ignore", category=pd.errors.SettingWithCopyWarning)

#Importar Dataframe que contiene el trabajo semanal en la linea de volúmenes
df_vols_trabajo_semanal = pd.read_excel('./dataframes/df_vols_trabajo_semanal.xlsx')

#Preparar dataset
df_sarima = df_vols_trabajo_semanal.rename(columns={"semana_primer_dia": "ds", "tiempo_trabajo_horas": "y"})
df_sarima = df_sarima.drop(['semana', 'cantidad_fabricada', 'tiempo_trabajo', 'Unnamed: 0'], axis=1)

#Predeciremos 4 meses (16 semanaas, por tanto se testean 16 semanas)
fecha_max = df_vols_trabajo_semanal['semana_primer_dia'].max()
fecha_limite = fecha_max - pd.Timedelta(weeks = 15)
df_sarima_train = df_sarima[df_sarima['ds'] < pd.to_datetime(fecha_limite)]
df_sarima_test = df_sarima[df_sarima['ds'] >= pd.to_datetime(fecha_limite)]

print('Cantidad datos entrenamiento: ' + str(len(df_sarima_train)))
print('Cantidad datos test: ' + str(len(df_sarima_test)))

import warnings
from statsmodels.tsa.statespace.sarimax import SARIMAX
from joblib import Parallel, delayed
import pandas as pd
from sklearn.metrics import mean_squared_error

# Paralelizamos el ajuste de hiperparámetros para el modelo SARIMAX
# ITERATE = True  
ITERATE = False 

def adjust_model(order_input, seasonal_order_input):
    try:
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter("always")
            
            # Ajuste del modelo SARIMA
            forecaster = SARIMAX(
                df_sarima_train['y'], 
                order=order_input, 
                seasonal_order=seasonal_order_input, 
                trend=None,
                enforce_stationarity=False,
                enforce_invertibility=False
            )
            
            # Intento de ajuste
            results = forecaster.fit(maxiter=10000)
            
            # Verificar si hubo advertencias como no convergencia
            # if any("ConvergenceWarning" in str(warning.message) or 
            #        "Too few observations" in str(warning.message) 
            #        for warning in w):
            #     print(f"Advertencia en la combinación Order: {order_input}, Seasonal Order: {seasonal_order_input}. Ignorado.")
            #     return order_input, seasonal_order_input, float("inf")
            
            # Predicción y cálculo del error si no hay advertencias
            y_pred_sarima = results.get_forecast(steps=16).predicted_mean
            data = {'ds': df_sarima_test['ds'], 'yhat': y_pred_sarima}
            y_pred_sarima = pd.DataFrame(data)
            
            rmse = mean_squared_error(df_sarima_test['y'], y_pred_sarima['yhat']) ** 0.5
            print(f"Order: {order_input}, Seasonal Order: {seasonal_order_input}, RMSE: {rmse}")
        
    except Exception as e:
        print(f"Error en Order: {order_input}, Seasonal Order: {seasonal_order_input} - {e}")
        rmse = float("inf")

    return order_input, seasonal_order_input, rmse

# Definir grid de búsqueda para los hiperparámetros
# rp, rd, rq = 3, 2, 3
# rP, rD, rQ, rS = 3, 2, 3, 52

rp, rd, rq = 4, 3, 5
rP, rD, rQ, rS = 3, 3, 3, 52

pdq = [(p, d, q) for p in range(rp) for d in range(rd) for q in range(rq)]
seasonal_pdq = [(P, D, Q, rS) for P in range(rP) for D in range(rD) for Q in range(rQ)]

# Iterar de manera paralelizada para buscar los hiperparámetros que minimizan el RMSE para el dataset.
if ITERATE:
    results = []
    for order in pdq:
        for seasonal_order in seasonal_pdq:
            result = adjust_model(order, seasonal_order)
            results.append(result)


#Buscar en el dataset results para buscar los mejores hiperparámetros
if ITERATE:
    best_rmse = float('inf')
    best_pdq = None
    best_seasonal_pdq = None
    
    order_array = []
    seasonal_order_array= []
    rmse_array = []
    
    for result in results:
        order = result[0]
        seasonal_order = result[1]
        rmse = result[2]
        
        order_array.append(order)
        seasonal_order_array.append(seasonal_order)
        rmse_array.append(rmse)
    
        if rmse < best_rmse:
            best_pdq = order
            best_seasonal_pdq = seasonal_order
            best_rmse = rmse
    
    print(best_pdq)
    print(best_seasonal_pdq)
    print(best_rmse)
    
    results_df = pd.DataFrame({
        'pdq': order_array, 
        'sea_pdq': seasonal_order_array,
        'rmse': rmse_array
        })

    #Exporta los resultados de la iteración a excel
    output_route = '../03 - Output/iterations/sarima_iterations' + '_' + str(rp) + str(rd) + str(rq) + '_' + str(rP) + str(rD) + str(rQ) + str(rS) + '.xlsx'
    results_df.to_excel(output_route)

#Si no se quiere iterar, emplea los mejores hiperparámetros encontrados
else:
    #Limitando no convergencia, resulaodo raro en previsión.
    best_pdq = (3, 2, 4)
    best_seasonal_pdq = (2, 0, 2, 52)
    best_rmse = 4.3671


from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Definimos y entrenamos el modelo SARIMA utilizando statsmodels
forecaster = SARIMAX(
    df_sarima_train['y'],
    order=best_pdq,
    seasonal_order=best_seasonal_pdq,
    trend=None,
    enforce_stationarity=False,
    enforce_invertibility=False
)

# Ajustamos el modelo con un máximo de 100 iteraciones
results = forecaster.fit(maxiter=1000)

# Predecimos los valores en el rango del conjunto de prueba
y_pred_sarima = results.get_forecast(steps=16).predicted_mean

# Convertimos los resultados a un DataFrame para el gráfico y cálculo de error
data = {
    'ds': df_sarima_test['ds'],
    'yhat': y_pred_sarima
}
y_pred_sarima = pd.DataFrame(data)

# Calculamos el RMSE
rmse_sarima = mean_squared_error(df_sarima_test['y'], y_pred_sarima['yhat']) ** 0.5
print('RMSE: ' + str(rmse_sarima))

# Visualización de los resultados
dims = (20, 7)
fig, ax = plt.subplots(figsize=dims)
ax.set_ylim(0, 50)

sns.lineplot(data=df_sarima_train, x='ds', y='y', color='blue', label='train-test data')
sns.lineplot(data=df_sarima_test, x='ds', y='y', color='blue')
sns.lineplot(data=y_pred_sarima, x='ds', y='yhat', color='green', label='SARIMA')
plt.show()


#Preparar dataset de comparación
df_forecast_comparison_sarima = df_sarima_test.merge(y_pred_sarima, on= 'ds')
df_forecast_comparison_sarima['error'] =  df_forecast_comparison_sarima['y'] - df_forecast_comparison_sarima['yhat']
#Parece centrado en 0. Buena señal
df_forecast_comparison_sarima['error'].plot(kind = 'bar')
print('suma de errores: ' + str(df_forecast_comparison_sarima['error'].sum()))


#Calcular métricas de error
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error
print ('RMSE SARIMA: ' + str(mean_squared_error(df_forecast_comparison_sarima['y'], df_forecast_comparison_sarima['yhat']) ** (1/2)))
print ('MAE SARIMA: ' + str(mean_absolute_error(df_forecast_comparison_sarima['y'], df_forecast_comparison_sarima['yhat'])))
print ('MAPE SARIMA: ' + str(mean_absolute_percentage_error(df_forecast_comparison_sarima['y'], df_forecast_comparison_sarima['yhat'])))


future_dates = pd.date_range(start=fecha_max, periods=17, freq='W-MON')[1:]

from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.dates as mdates

# Definimos la función para limitar los valores a cero
def limitar_cero(valor):
    return max(0, valor)

# Definimos y entrenamos el modelo SARIMA utilizando statsmodels
forecaster = SARIMAX(
    df_sarima['y'],
    order=best_pdq,
    seasonal_order=best_seasonal_pdq,
    trend = None,
    enforce_stationarity=False,
    enforce_invertibility=False
)

# Ajustamos el modelo
sarima_fit = forecaster.fit(maxiter=10000)

# Generamos fechas futuras y realizamos las predicciones para el horizonte deseado
y_pred_sarima = sarima_fit.predict(start=len(df_sarima), end=len(df_sarima) + 15)

# Convertimos los resultados a un DataFrame para el gráfico
data = {
    'ds': future_dates, 
    'yhat': y_pred_sarima
}
y_pred_sarima = pd.DataFrame(data)

# Aplicamos la función limitar_cero para evitar valores negativos
y_pred_sarima['yhat'] = y_pred_sarima['yhat'].apply(limitar_cero)

# Visualización de los resultados
dims = (20, 7)
fig, ax = plt.subplots(figsize=dims)
ax.set_ylim(0, 50)
plt.xticks(rotation=90)
sns.lineplot(data=df_sarima, x='ds', y='y', color='blue', label='Histórico')
sns.lineplot(data=y_pred_sarima, x='ds', y='yhat', color='green', label='Predicción SARIMA')

# Configuración de los ejes para mostrar solo los meses
ax.xaxis.set_major_locator(mdates.MonthLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))

plt.show()


from pmdarima import auto_arima

from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.dates as mdates


auto_model = auto_arima(df_sarima['y'], seasonal=True, m=52, trace=True,
                            error_action='ignore', suppress_warnings=True, stepwise=True)
    
# Extrae los mejores órdenes
best_pdq = auto_model.order
best_seasonal_pdq = auto_model.seasonal_order

# Definimos la función para limitar los valores a cero
def limitar_cero(valor):
    return max(0, valor)

# Definimos y entrenamos el modelo SARIMA utilizando statsmodels
forecaster = SARIMAX(
    df_sarima['y'],
    order=best_pdq,
    seasonal_order=best_seasonal_pdq,
    trend = None,
    enforce_stationarity=False,
    enforce_invertibility=False
)

# Ajustamos el modelo
sarima_fit = forecaster.fit(maxiter=10000)

# Generamos fechas futuras y realizamos las predicciones para el horizonte deseado
y_pred_sarima = sarima_fit.predict(start=len(df_sarima), end=len(df_sarima) + 15)

# Convertimos los resultados a un DataFrame para el gráfico
data = {
    'ds': future_dates, 
    'yhat': y_pred_sarima
}
y_pred_sarima = pd.DataFrame(data)

# Aplicamos la función limitar_cero para evitar valores negativos
y_pred_sarima['yhat'] = y_pred_sarima['yhat'].apply(limitar_cero)

# Visualización de los resultados
dims = (20, 7)
fig, ax = plt.subplots(figsize=dims)
ax.set_ylim(0, 50)
plt.xticks(rotation=90)
sns.lineplot(data=df_sarima, x='ds', y='y', color='blue', label='Histórico')
sns.lineplot(data=y_pred_sarima, x='ds', y='yhat', color='green', label='Predicción SARIMA')

# Configuración de los ejes para mostrar solo los meses
ax.xaxis.set_major_locator(mdates.MonthLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))

plt.show()


from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Definimos y entrenamos el modelo SARIMA utilizando statsmodels
forecaster = SARIMAX(
    df_sarima_train['y'],
    order=best_pdq,
    seasonal_order=best_seasonal_pdq,
    trend=None,
    enforce_stationarity=False,
    enforce_invertibility=False
)

# Ajustamos el modelo con un máximo de 100 iteraciones
results = forecaster.fit(maxiter=1000)

# Predecimos los valores en el rango del conjunto de prueba
y_pred_sarima_parameters = results.get_forecast(steps=16).predicted_mean

# Convertimos los resultados a un DataFrame para el gráfico y cálculo de error
data = {
    'ds': df_sarima_test['ds'],
    'yhat': y_pred_sarima_parameters
}
y_pred_sarima_parameters = pd.DataFrame(data)

# Calculamos el RMSE
rmse_sarima = mean_squared_error(df_sarima_test['y'], y_pred_sarima_parameters['yhat']) ** 0.5
print('RMSE: ' + str(rmse_sarima))

# Visualización de los resultados
dims = (20, 7)
fig, ax = plt.subplots(figsize=dims)
ax.set_ylim(0, 50)

sns.lineplot(data=df_sarima_train, x='ds', y='y', color='blue', label='train-test data')
sns.lineplot(data=df_sarima_test, x='ds', y='y', color='blue')
sns.lineplot(data=y_pred_sarima_parameters, x='ds', y='yhat', color='green', label='SARIMA')
plt.show()


#Preparar dataset de comparación
df_forecast_comparison_sarima = df_sarima_test.merge(y_pred_sarima_parameters, on= 'ds')
df_forecast_comparison_sarima['error'] =  df_forecast_comparison_sarima['y'] - df_forecast_comparison_sarima['yhat']
#Parece centrado en 0. Buena señal
df_forecast_comparison_sarima['error'].plot(kind = 'bar')
print('suma de errores: ' + str(df_forecast_comparison_sarima['error'].sum()))


#Calcular métricas de error
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error
print ('RMSE SARIMA: ' + str(mean_squared_error(df_forecast_comparison_sarima['y'], df_forecast_comparison_sarima['yhat']) ** (1/2)))
print ('MAE SARIMA: ' + str(mean_absolute_error(df_forecast_comparison_sarima['y'], df_forecast_comparison_sarima['yhat'])))
print ('MAPE SARIMA: ' + str(mean_absolute_percentage_error(df_forecast_comparison_sarima['y'], df_forecast_comparison_sarima['yhat'])))


y_pred_sarima.to_excel('./predictions/y_pred_sarima.xlsx')